from telebot import types
from app.client.bot.bot import bot
from tinkoff.invest import Client, RequestError
from tinkoff.invest.services import SandboxService
from app.client.utils.helpers import to_money_value
from app.client.utils.methods import get_sandbox_portfolio
from tinkoff.invest import MoneyValue
from dotenv import load_dotenv
import os
from app.client.handlers.utils.message_utils import send_or_edit_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_tokens():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    """
    load_dotenv()
    return {
        "token": os.getenv('TOKEN'),
        "sandbox_token": os.getenv('SANDBOX_TOKEN')
    }


@bot.callback_query_handler(func=lambda call: call.data == 'sandbox_info')
def sandbox_info_handler(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π.
    """
    chat_id = call.message.chat.id
    tokens = get_tokens()
    
    if not tokens["sandbox_token"]:
        send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ")
        return
    
    inline_keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text='üìä –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–µ—Å–æ—á–Ω–∏—Ü—ã', callback_data='get_sandbox'),
        types.InlineKeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='set_sandbox_balance'),
    ]
    
    for button in buttons:
        inline_keyboard.add(button)
    
    send_or_edit_message(
        chat_id, 
        'üèùÔ∏è *–ü–µ—Å–æ—á–Ω–∏—Ü–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π:', 
        reply_markup=inline_keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data == 'set_sandbox_balance')
def set_sandbox_balance(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.
    
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    chat_id = call.message.chat.id
    tokens = get_tokens()
    
    if not tokens["sandbox_token"]:
        send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ")
        return
    
    msg = send_or_edit_message(chat_id, "üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
    bot.register_next_step_handler(call.message, set_sandbox_balance_2)


def set_sandbox_balance_2(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.
    
    –ü–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É.
    """
    chat_id = message.chat.id
    tokens = get_tokens()
    
    if not tokens["sandbox_token"]:
        send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ —á–∏—Å–ª–∞
    try:
        money_value = int(message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        send_or_edit_message(chat_id, f"‚è≥ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞*\n\n–ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ {money_value} —Ä—É–±...")
        
        with Client(tokens["sandbox_token"]) as client:
            sb: SandboxService = client.sandbox

            accounts = sb.get_sandbox_accounts()
            account_id = accounts.accounts[0].id

            units, nano = to_money_value(money_value)

            sb.sandbox_pay_in(
                account_id=account_id,
                amount=MoneyValue(units=units, nano=nano, currency='rub'),
            )

            send_or_edit_message(chat_id, f"‚úÖ *–£—Å–ø–µ—à–Ω–æ*\n\n–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ `{money_value}` —Ä—É–±.")
    
    except ValueError:
        msg = send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        bot.register_next_step_handler(msg, set_sandbox_balance_2)
        return
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞*\n\n`{str(e)}`")


@bot.callback_query_handler(func=lambda call: call.data == 'get_sandbox')
def get_sandbox(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ.
    """
    chat_id = call.message.chat.id
    tokens = get_tokens()
    
    if not tokens["sandbox_token"]:
        send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        send_or_edit_message(chat_id, "‚è≥ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞*\n\n–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ...")
        
        portfolio = get_sandbox_portfolio(tokens["sandbox_token"])
        positions = portfolio['positions']

        text = (
            "üìä *–ü–û–†–¢–§–û–õ–ò–û –í –ü–ï–°–û–ß–ù–ò–¶–ï*\n\n"
            f"üíπ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π: `{portfolio['total_amount_shares']}` —Ä—É–±.\n"
            f"üìù –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–π: `{portfolio['total_amount_bonds']}` —Ä—É–±.\n"
            f"üìà –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ–Ω–¥–æ–≤: `{portfolio['total_amount_etf']}` —Ä—É–±.\n"
            f"üí± –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–ª—é—Ç: `{portfolio['total_amount_currencies']}` —Ä—É–±.\n"
            f"üìä –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: `{portfolio['expected_yield']}` %\n"
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: `{portfolio['total_amount_portfolio']}` —Ä—É–±.\n"
        )

        if positions:
            text += "\n*üìã –ê–∫—Ç–∏–≤—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ:*\n"
            for position in positions:
                text += (
                    f"\nüîπ *{position['ticker']}*\n"
                    f"  ‚Ä¢ FIGI: `{position['figi']}`\n"
                    f"  ‚Ä¢ –¢–∏–ø: `{position['type']}`\n"
                    f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{position['quantity']}`\n"
                    f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: `{position['average_position_price']}`\n"
                    f"  ‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: `{position['expected_yield']}`\n"
                    f"  ‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: `{position['current_price']}`\n"
                    f"  ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: `{position['blocked']}`\n"
                )
        else:
            text += "\n*–ê–∫—Ç–∏–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*"
        
        send_or_edit_message(chat_id, text)
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ*\n\n`{str(e)}`")
