from telebot import types
from app.client.api.signals_client import SignalsApiClient
from app.client.api.strategy_client import StrategyApiClient
from app.client.bot.bot import bot
from apscheduler.schedulers.background import BackgroundScheduler
from app.client.strategy.strategy_run import strategy_run
from app.client.store.store import strategy_scheduler
from app.client.handlers.utils.message_utils import send_or_edit_message

strategy_client = StrategyApiClient()
signals_client = SignalsApiClient()

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
available_signals = ['RSI', 'SMA', 'EMA', 'TAKE PROFIT/STOP LOSS', 'ALLIGATOR', 'GPT', 'LSTM', 'BOLLINGER', 'MACD']
selected_signals = {}
tpsl_trigger = False
rsi_trigger = False
sma_trigger = False
ema_trigger = False
alligator_trigger = False
gpt_trigger = False
lstm_trigger = False
bollinger_trigger = False
macd_trigger = False
time = None
auto_market = None
quantity = None
joint = None


@bot.callback_query_handler(func=lambda call: call.data == 'strategy_set')
def set_signals(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    chat_id = call.message.chat.id
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    signal_emojis = {
        'RSI': 'üìä', 'SMA': 'üìà', 'EMA': 'üìâ', 
        'TAKE PROFIT/STOP LOSS': 'üéØ', 'ALLIGATOR': 'üêä',
        'GPT': 'ü§ñ', 'LSTM': 'üß†', 'BOLLINGER': 'üìä', 'MACD': 'üìà'
    }
    
    buttons = [types.InlineKeyboardButton(f"{signal_emojis.get(signal, '')} {signal}", callback_data=f'select_{signal.lower()}') for signal in available_signals]
    buttons.append(types.InlineKeyboardButton('‚úÖ –û–∫', callback_data='ok'))
    buttons.append(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel'))
    
    for button in buttons:
        markup.add(button)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    message_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏*\n\n"
    
    if selected_signals:
        message_text += "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
        for signal in selected_signals:
            message_text += f"‚úÖ {signal}\n"
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–∫' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
    else:
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:"
    
    send_or_edit_message(chat_id, message_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_'))
def select_signal(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞.
    
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """
    global selected_signals, tpsl_trigger, rsi_trigger, sma_trigger, ema_trigger, alligator_trigger, gpt_trigger, lstm_trigger, bollinger_trigger, macd_trigger
    chat_id = call.message.chat.id
    signal = call.data.split('_')[1].upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —Å–∏–≥–Ω–∞–ª —É–∂–µ
    if selected_signals.get(signal):
        markup = create_signals_markup()
        message_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏*\n\n"
        message_text += f"‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª {signal} —É–∂–µ –≤—ã–±—Ä–∞–Ω.\n\n"
        message_text += "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
        for selected_signal in selected_signals:
            message_text += f"‚úÖ {selected_signal}\n"
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–∫' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
        send_or_edit_message(chat_id, message_text, reply_markup=markup)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    try:
        signal_added = False
        error_message = None
        
        if signal == 'RSI':
            current_settings = signals_client.get_signal_rsi()
            if current_settings:
                selected_signals[signal] = True
                rsi_trigger = True
                signal_added = True
            else:
                error_message = "–°–∏–≥–Ω–∞–ª RSI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        elif signal == 'SMA':
            current_settings = signals_client.get_signal_sma()
            if current_settings:
                selected_signals[signal] = True
                sma_trigger = True
                signal_added = True
            else:
                error_message = "–°–∏–≥–Ω–∞–ª SMA –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        elif signal == 'EMA':
            current_settings = signals_client.get_signal_ema()
            if current_settings:
                selected_signals[signal] = True
                ema_trigger = True
                signal_added = True
            else:
                error_message = "–°–∏–≥–Ω–∞–ª EMA –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        elif signal == 'TAKE PROFIT/STOP LOSS':
            current_settings = signals_client.get_signal_tpsl()
            if current_settings:
                selected_signals[signal] = True
                tpsl_trigger = True
                signal_added = True
            else:
                error_message = "–°–∏–≥–Ω–∞–ª Take Profit/Stop Loss –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        elif signal == 'ALLIGATOR':
            current_settings = signals_client.get_signal_alligator()
            if current_settings:
                selected_signals[signal] = True
                alligator_trigger = True
                signal_added = True
            else:
                error_message = "–°–∏–≥–Ω–∞–ª Alligator –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        elif signal == 'GPT':
            current_settings = signals_client.get_signal_gpt()
            if current_settings:
                selected_signals[signal] = True
                gpt_trigger = True
                signal_added = True
            else:
                error_message = "–°–∏–≥–Ω–∞–ª GPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        elif signal == 'LSTM':
            selected_signals[signal] = True
            lstm_trigger = True
            signal_added = True
        
        elif signal == 'BOLLINGER':
            current_settings = signals_client.get_signal_bollinger()
            if current_settings:
                selected_signals[signal] = True
                bollinger_trigger = True
                signal_added = True
            else:
                error_message = "–°–∏–≥–Ω–∞–ª Bollinger –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        elif signal == 'MACD':
            current_settings = signals_client.get_signal_macd()
            if current_settings:
                selected_signals[signal] = True
                macd_trigger = True
                signal_added = True
            else:
                error_message = "–°–∏–≥–Ω–∞–ª MACD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        markup = create_signals_markup()
        message_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏*\n\n"
        
        if error_message:
            message_text += f"‚ùå *–û—à–∏–±–∫–∞*: {error_message}\n\n"
        elif signal_added:
            message_text += f"‚úÖ –°–∏–≥–Ω–∞–ª {signal} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
        if selected_signals:
            message_text += "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
            for selected_signal in selected_signals:
                message_text += f"‚úÖ {selected_signal}\n"
            message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–∫' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
        else:
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:"
        
        send_or_edit_message(chat_id, message_text, reply_markup=markup)
    
    except Exception as e:
        markup = create_signals_markup()
        message_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏*\n\n"
        message_text += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal}: {str(e)}\n\n"
        
        if selected_signals:
            message_text += "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
            for selected_signal in selected_signals:
                message_text += f"‚úÖ {selected_signal}\n"
            message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–∫' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
        else:
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:"
            
        send_or_edit_message(chat_id, message_text, reply_markup=markup)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
def create_signals_markup():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤.
    """
    markup = types.InlineKeyboardMarkup(row_width=2)
    signal_emojis = {
        'RSI': 'üìä', 'SMA': 'üìà', 'EMA': 'üìâ', 
        'TAKE PROFIT/STOP LOSS': 'üéØ', 'ALLIGATOR': 'üêä',
        'GPT': 'ü§ñ', 'LSTM': 'üß†', 'BOLLINGER': 'üìä', 'MACD': 'üìà'
    }
    
    buttons = [types.InlineKeyboardButton(f"{signal_emojis.get(signal, '')} {signal}", callback_data=f'select_{signal.lower()}') for signal in available_signals]
    buttons.append(types.InlineKeyboardButton('‚úÖ –û–∫', callback_data='ok'))
    buttons.append(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel'))
    
    for button in buttons:
        markup.add(button)
    
    return markup


@bot.callback_query_handler(func=lambda call: call.data == 'ok')
def confirm_selection(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤.
    
    –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
    chat_id = call.message.chat.id

    if not selected_signals:
        send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton('‚è±Ô∏è 2 –º–∏–Ω—É—Ç—ã', callback_data='time_2'),
        types.InlineKeyboardButton('‚è±Ô∏è 5 –º–∏–Ω—É—Ç', callback_data='time_5'),
        types.InlineKeyboardButton('‚è±Ô∏è 10 –º–∏–Ω—É—Ç', callback_data='time_10')
    )
    send_or_edit_message(
        chat_id, 
        "‚è∞ *–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:", 
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('time_'))
def select_time(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.
    """
    global time
    chat_id = call.message.chat.id
    time = int(call.data.split('_')[1])

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='auto_yes'),
        types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='auto_no')
    )
    send_or_edit_message(
        chat_id, 
        "ü§ñ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è*\n\n–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é?", 
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('auto_'))
def set_auto_market(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–º–∞–≥.
    """
    global auto_market
    chat_id = call.message.chat.id
    auto_market = call.data.split('_')[1] == 'yes'

    if auto_market:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–∫–æ–ª—å–∫–æ –±—É–º–∞–≥ –ø–æ–∫—É–ø–∞—Ç—å/–ø—Ä–æ–¥–∞–≤–∞—Ç—å
        msg = send_or_edit_message(chat_id, "üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥*\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏:")
        bot.register_next_step_handler(msg, set_quantity)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å joint-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        global quantity
        quantity = 0
        ask_for_joint(chat_id)


def set_quantity(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–º–∞–≥.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–º–∞–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    """
    global quantity
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ —á–∏—Å–ª–∞
    try:
        quantity = int(message.text)
    except ValueError:
        msg = send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        bot.register_next_step_handler(msg, set_quantity)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —É—á–µ—Ç–æ–º joint-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    ask_for_joint(chat_id)


def ask_for_joint(chat_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    """
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–æ–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üîÑ –ò (AND)", callback_data='joint_and'),
        types.InlineKeyboardButton("üîÄ –ò–õ–ò (OR)", callback_data='joint_or')
    )
    
    send_or_edit_message(
        chat_id, 
        "üîó *–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π:", 
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data in ['joint_and', 'joint_or'])
def set_joint(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
    global selected_signals, joint, tpsl_trigger, rsi_trigger, sma_trigger, ema_trigger, alligator_trigger, gpt_trigger, lstm_trigger, bollinger_trigger, macd_trigger, time, auto_market, quantity

    chat_id = call.message.chat.id
    joint = call.data == 'joint_and'

    try:
        send_or_edit_message(chat_id, "‚è≥ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞*\n\n–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ API-–∫–ª–∏–µ–Ω—Ç
        strategy_client.update_strategy_signals(
            tpsl_trigger,
            rsi_trigger,
            sma_trigger,
            alligator_trigger,
            gpt_trigger,
            lstm_trigger,
            bollinger_trigger,
            macd_trigger,
            ema_trigger,
            joint
        )
        
        strategy_client.update_strategy_settings(
            f"{time}",
            auto_market,
            quantity
        )

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
        global strategy_scheduler
        if strategy_scheduler:
            strategy_scheduler.shutdown()

        strategy_scheduler = BackgroundScheduler()
        strategy_scheduler.start()

        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from dotenv import load_dotenv
        import os
        load_dotenv()
        env_chat_id = os.getenv('CHAT_ID')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π chat_id
        strategy_scheduler.add_job(strategy_run, 'interval', minutes=int(time))

        # –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        selected_signals = {}
        tpsl_trigger = False
        rsi_trigger = False
        sma_trigger = False
        alligator_trigger = False
        gpt_trigger = False
        lstm_trigger = False
        bollinger_trigger = False
        macd_trigger = False
        ema_trigger = False
        time = None
        auto_market = None
        quantity = None
        joint = None

        send_or_edit_message(chat_id, "‚úÖ *–£—Å–ø–µ—à–Ω–æ*\n\n–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞.")
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏*\n\n`{str(e)}`")


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel_strategy(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    """
    global selected_signals, tpsl_trigger, rsi_trigger, sma_trigger, ema_trigger, alligator_trigger, gpt_trigger, lstm_trigger, bollinger_trigger, macd_trigger, time, auto_market, quantity, joint
    chat_id = call.message.chat.id

    # –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    selected_signals.clear()
    tpsl_trigger = False
    rsi_trigger = False
    sma_trigger = False
    alligator_trigger = False
    gpt_trigger = False
    lstm_trigger = False
    bollinger_trigger = False
    macd_trigger = False
    ema_trigger = False
    time = None
    auto_market = None
    quantity = None
    joint = None

    send_or_edit_message(chat_id, "‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ*\n\n–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
