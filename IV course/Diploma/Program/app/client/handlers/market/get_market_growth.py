from datetime import datetime, timedelta
from app.client.api.instruments_client import InstrumentsApiClient
from app.client.bot.bot import bot
from telebot import types
from app.client.utils.methods import get_info_by_ticker, get_price_change_in_current_interval
from tinkoff.invest import CandleInterval
from app.client.handlers.utils.message_utils import send_or_edit_message

instruments_client = InstrumentsApiClient()

# –ú–∞–ø–ø–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
INTERVAL_MAPPING = {
    '10 –º–∏–Ω—É—Ç': (timedelta(minutes=10), CandleInterval.CANDLE_INTERVAL_1_MIN),
    '—á–∞—Å': (timedelta(hours=1), CandleInterval.CANDLE_INTERVAL_1_MIN),
    '–Ω–µ–¥–µ–ª—è': (timedelta(weeks=1), CandleInterval.CANDLE_INTERVAL_DAY),
    '–º–µ—Å—è—Ü': (timedelta(days=30), CandleInterval.CANDLE_INTERVAL_WEEK),
    '–≥–æ–¥': (timedelta(days=365), CandleInterval.CANDLE_INTERVAL_MONTH)
}

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
PERCENT_RANGES = {
    '–¥–æ 2%': (0, 2),
    '–æ—Ç 2% –¥–æ 5%': (2, 5),
    '–æ—Ç 5% –¥–æ 10%': (5, 10),
    '–æ—Ç 10% –¥–æ 20%': (10, 20),
    '–±–æ–ª–µ–µ 20%': (20, float('inf')),  
    '–¥–æ 100%': (0.01, float('inf'))
}


@bot.callback_query_handler(func=lambda call: call.data == 'get_market_growth')
def get_market_growth_handler(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ—Å—Ç–µ —Ä—ã–Ω–∫–∞.
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏.
    """
    chat_id = call.message.chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        instruments = instruments_client.get_all_instruments()
        
        if not instruments:
            send_or_edit_message(chat_id, '‚ùå *–û—à–∏–±–∫–∞*\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
        else:
            inline_keyboard = types.InlineKeyboardMarkup()
            buttons = [
                types.InlineKeyboardButton(text='10 –º–∏–Ω—É—Ç', callback_data='intervalgrowth_10 –º–∏–Ω—É—Ç'),
                types.InlineKeyboardButton(text='—á–∞—Å', callback_data='intervalgrowth_—á–∞—Å'),
                types.InlineKeyboardButton(text='–¥–µ–Ω—å', callback_data='intervalgrowth_–¥–µ–Ω—å'),
                types.InlineKeyboardButton(text='–Ω–µ–¥–µ–ª—è', callback_data='intervalgrowth_–Ω–µ–¥–µ–ª—è'),
                types.InlineKeyboardButton(text='–º–µ—Å—è—Ü', callback_data='intervalgrowth_–º–µ—Å—è—Ü'),
                types.InlineKeyboardButton(text='–≥–æ–¥', callback_data='intervalgrowth_–≥–æ–¥')
            ]
            
            for button in buttons:
                inline_keyboard.add(button)
            
            send_or_edit_message(
                chat_id, 
                'üìà *–†–æ—Å—Ç —Ä—ã–Ω–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏:', 
                reply_markup=inline_keyboard
            )
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤*\n\n`{str(e)}`")


@bot.callback_query_handler(func=lambda call: call.data.startswith('intervalgrowth_'))
def interval_handler(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏.
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    """
    chat_id = call.message.chat.id
    interval = call.data.replace('intervalgrowth_', '')
    
    try:
        inline_keyboard = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton(text='–¥–æ 2%', callback_data=f'percentgrowth_–¥–æ 2%_{interval}'),
            types.InlineKeyboardButton(text='–æ—Ç 2% –¥–æ 5%', callback_data=f'percentgrowth_–æ—Ç 2% –¥–æ 5%_{interval}'),
            types.InlineKeyboardButton(text='–æ—Ç 5% –¥–æ 10%', callback_data=f'percentgrowth_–æ—Ç 5% –¥–æ 10%_{interval}'),
            types.InlineKeyboardButton(text='–æ—Ç 10% –¥–æ 20%', callback_data=f'percentgrowth_–æ—Ç 10% –¥–æ 20%_{interval}'),
            types.InlineKeyboardButton(text='–±–æ–ª–µ–µ 20%', callback_data=f'percentgrowth_–±–æ–ª–µ–µ 20%_{interval}'),
            types.InlineKeyboardButton(text='–û–±—â–∏–π —Ä–æ—Å—Ç', callback_data=f'percentgrowth_–¥–æ 100%_{interval}')
        ]
        
        for button in buttons:
            inline_keyboard.add(button)
        
        send_or_edit_message(
            chat_id, 
            f'üìà *–†–æ—Å—Ç —Ä—ã–Ω–∫–∞*\n\n–í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: `{interval}`\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:', 
            reply_markup=inline_keyboard
        )
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞*\n\n`{str(e)}`")


@bot.callback_query_handler(func=lambda call: call.data.startswith('percentgrowth_'))
def percent_handler(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.
    """
    chat_id = call.message.chat.id
    data = call.data.split('_')
    percent_range = data[1]
    interval = data[2]
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        send_or_edit_message(
            chat_id, 
            f"‚è≥ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞*\n\n–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ—Å—Ç–µ —Ä—ã–Ω–∫–∞ –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª `{interval}` —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º `{percent_range}`..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏
        start_time, candle_interval = get_time_interval(interval)
        if start_time is None:
            send_or_edit_message(chat_id, '‚ùå *–û—à–∏–±–∫–∞*\n\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        instruments = instruments_client.get_all_instruments()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        found_instruments = False
        for instrument in instruments:
            ticker = instrument.get('ticker')
            figi = instrument.get('figi')
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            info = get_info_by_ticker(ticker)
            name = info['name'].values[0:1][0]
            type_of = info['type'].values[0:1][0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            end_time = datetime.now()
            price_change, price_change_percent, max_price, min_price, close_price = get_price_change_in_current_interval(
                figi, start_time, end_time, candle_interval)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            low, high = PERCENT_RANGES[percent_range]
            if low <= price_change_percent < high:
                found_instruments = True
                message_text = (
                    f'üìà *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—Å—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n\n'
                    f'üìå –ù–∞–∑–≤–∞–Ω–∏–µ: `{name}`\n'
                    f'üìã –¢–∏–ø: `{type_of}`\n'
                    f'üè∑Ô∏è –¢–∏–∫–µ—Ä: `{ticker}`\n'
                    f'üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: `+{round(price_change_percent, 2)}%`\n'
                    f'üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: `{close_price}`\n'
                    f'‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: `{max_price}`\n'
                    f'‚¨áÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: `{min_price}`\n'
                )
                bot.send_message(chat_id, message_text, parse_mode='Markdown')
        
        if not found_instruments:
            send_or_edit_message(
                chat_id, 
                f'‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ä–æ—Å—Ç–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {percent_range} –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}'
            )
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ—Å—Ç–µ —Ä—ã–Ω–∫–∞*\n\n`{str(e)}`")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
def get_time_interval(interval):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
    
    Args:
        interval: –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
        
    Returns:
        tuple: (start_time, candle_interval)
    """
    if interval == '–¥–µ–Ω—å':
        start_time = datetime.now().replace(hour=10, minute=0, second=0)
        candle_interval = CandleInterval.CANDLE_INTERVAL_10_MIN
    else:
        timedelta_value, candle_interval = INTERVAL_MAPPING.get(interval, (None, None))
        if timedelta_value:
            start_time = datetime.now() - timedelta_value
        else:
            start_time, candle_interval = None, None
    
    return start_time, candle_interval
