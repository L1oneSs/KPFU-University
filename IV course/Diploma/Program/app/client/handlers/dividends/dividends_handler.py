from app.client.api.instruments_client import InstrumentsApiClient
from app.client.bot.bot import bot
from app.client.handlers.utils.message_utils import send_or_edit_message, last_messages
from app.client.utils.methods import get_dividends_data
from dotenv import load_dotenv
import os

instruments_client = InstrumentsApiClient()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_tokens():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    """
    load_dotenv()
    return {
        "token": os.getenv('TOKEN'),
        "sandbox_token": os.getenv('SANDBOX_TOKEN')
    }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤
def stop_dividends_handler(chat_id):
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
    
    Args:
        chat_id: ID —á–∞—Ç–∞
    """
    if chat_id in last_messages:
        del last_messages[chat_id]


@bot.message_handler(func=lambda message: message.text == '–î–∏–≤–∏–¥–µ–Ω–¥—ã')
def dividends_handler(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö.
    
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–∏–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤.
    """
    chat_id = message.chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        tokens = get_tokens()
        token = tokens["token"]
        
        if not token:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            msg = bot.send_message(
                chat_id=chat_id,
                text="‚ùå *–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                parse_mode='Markdown'
            )
            last_messages[chat_id] = msg.message_id
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–∏–æ–¥–∞
        msg = bot.send_message(
            chat_id=chat_id,
            text="üìÖ *–î–∏–≤–∏–¥–µ–Ω–¥—ã*\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ –¥–Ω—è—Ö):",
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        last_messages[chat_id] = msg.message_id
        
        bot.register_next_step_handler(msg, handle_dividends_period, token)
    
    except Exception as e:
        msg = bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞*\n`{str(e)}`",
            parse_mode='Markdown'
        )
        last_messages[chat_id] = msg.message_id


def handle_dividends_period(message, token):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è.
    
    –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        token: –¢–æ–∫–µ–Ω API
    """
    chat_id = message.chat.id
    
    try:
        period = int(message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        send_or_edit_message(chat_id, "‚è≥ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞*\n–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        instruments = instruments_client.get_all_instruments()
        
        if not instruments:
            send_or_edit_message(chat_id, "üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö*\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
            return
        
        dividends_text = generate_dividends_report(token, period, instruments)
        send_or_edit_message(chat_id, dividends_text)
    
    except ValueError:
        msg = send_or_edit_message(chat_id, "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥*\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞:")
        bot.register_next_step_handler(msg, handle_dividends_period, token)
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞*\n`{str(e)}`")


def generate_dividends_report(token, period, instruments):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö.
    
    Args:
        token: –¢–æ–∫–µ–Ω API
        period: –ü–µ—Ä–∏–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –¥–Ω—è—Ö
        instruments: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
    Returns:
        str: –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö
    """
    report_text = 'üìä *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–í–ò–î–ï–ù–î–ê–•*\n\n'
    
    try:
        found_dividends = False
        
        for instrument in instruments:
            ticker = instrument.get('ticker')
            figi = instrument.get('figi')
            
            dividend_data = get_dividends_data(token, period, figi)
            
            if dividend_data:
                found_dividends = True
                report_text += format_dividend_data(ticker, dividend_data)
        
        if not found_dividends:
            return 'üìä *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–í–ò–î–ï–ù–î–ê–•*\n\n‚ùå –î–∏–≤–∏–¥–µ–Ω–¥—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        
        return report_text
    
    except Exception as e:
        return f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö*\n`{str(e)}`"


def format_dividend_data(ticker, data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö.
    
    Args:
        ticker: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        data: –î–∞–Ω–Ω—ã–µ –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ –¥–∏–≤–∏–¥–µ–Ω–¥–∞—Ö
    """
    return (
        f'\nüî∏ *–¢–∏–∫–µ—Ä: {ticker}*\n'
        f'üí∞ –î–∏–≤–∏–¥–µ–Ω–¥: `{data["dividend_net"]} —Ä—É–±.`\n'
        f'üìÖ –î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç: `{data["payment_date"]}`\n'
        f'üì£ –î–∞—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: `{data["declared_date"]}`\n'
        f'üõí –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–∫—É–ø–∫–∏: `{data["last_buy_date"]}`\n'
        f'üìù –î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞: `{data["record_date"]}`\n'
        f'üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: `{data["yield_value"]}%`\n'
    )
