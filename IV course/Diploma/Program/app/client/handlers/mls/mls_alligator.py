from datetime import datetime, timedelta
from app.client.api.instruments_client import InstrumentsApiClient
from app.client.api.signals_client import SignalsApiClient
from app.client.bot.bot import bot
from telebot import types
from app.client.graphics.alligator_graph import plot_alligator
from app.client.log.logger import setup_logger
from app.client.signals.alligator_signal import calculate_alligator_strategy
from app.client.store.store import mls_interval
from tinkoff.invest import CandleInterval, Client
from dotenv import load_dotenv
import os
from app.client.handlers.utils.message_utils import send_or_edit_message

from app.client.utils.helpers import calculate_profit, cast_money, create_df
from app.client.utils.methods import get_current_price, get_historic_candles, get_instrument_from_portfolio_by_ticker

instruments_client = InstrumentsApiClient()
signals_client = SignalsApiClient()

logger = setup_logger(__name__)

load_dotenv()
BROKER_FEE = os.getenv('BROKER_FEE')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_tokens():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    """
    load_dotenv()
    return {
        "token": os.getenv('TOKEN'),
        "sandbox_token": os.getenv('SANDBOX_TOKEN')
    }


@bot.callback_query_handler(func=lambda call: call.data == 'calc_mls_alligator')
def mls_alligator_handler(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Alligator —Å–∏–≥–Ω–∞–ª–∞.
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏.
    """
    chat_id = call.message.chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        instruments = instruments_client.get_all_instruments()
        
        if not instruments:
            send_or_edit_message(chat_id, '‚ùå *–û—à–∏–±–∫–∞*\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
        else:
            inline_keyboard = types.InlineKeyboardMarkup()
            buttons = [
                types.InlineKeyboardButton(text='üìÖ 6 –º–µ—Å—è—Ü–µ–≤', callback_data='alligator_interval_6'),
                types.InlineKeyboardButton(text='üìÜ 1 –≥–æ–¥', callback_data='alligator_interval_12')
            ]
            
            for button in buttons:
                inline_keyboard.add(button)
            
            send_or_edit_message(
                chat_id, 
                'üêä *Alligator –ì—Ä–∞—Ñ–∏–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏:', 
                reply_markup=inline_keyboard
            )
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤*\n\n`{str(e)}`")


@bot.callback_query_handler(func=lambda call: call.data.startswith('alligator_interval_'))
def interval_handler(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
    """
    global mls_interval
    chat_id = call.message.chat.id
    interval = call.data.replace('alligator_interval_', '')
    
    try:
        mls_interval = interval
        interval_text = "6 –º–µ—Å—è—Ü–µ–≤" if interval == '6' else "1 –≥–æ–¥"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        instruments = instruments_client.get_all_instruments()
        
        if not instruments:
            send_or_edit_message(chat_id, '‚ùå *–û—à–∏–±–∫–∞*\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
        else:
            inline_keyboard = types.InlineKeyboardMarkup()
            
            for instrument in instruments:
                ticker = instrument.get('ticker')
                button = types.InlineKeyboardButton(text=ticker, callback_data=f'mls_alligator_ticker_{ticker}')
                inline_keyboard.add(button)
            
            send_or_edit_message(
                chat_id, 
                f'üêä *Alligator –ì—Ä–∞—Ñ–∏–∫*\n\n–í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: `{interval_text}`\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', 
                reply_markup=inline_keyboard
            )
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞*\n\n`{str(e)}`")


@bot.callback_query_handler(func=lambda call: call.data.startswith('mls_alligator_ticker_'))
def calculate_mls_alligator(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Alligator —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
    
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–µ—á–∞—Ö, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Alligator —Å–∏–≥–Ω–∞–ª –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫.
    """
    chat_id = call.message.chat.id
    ticker = call.data.replace('mls_alligator_ticker_', '')
    
    try:
        send_or_edit_message(chat_id, f"‚è≥ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞*\n\n–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Alligator –¥–ª—è —Ç–∏–∫–µ—Ä–∞ `{ticker}`...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        tokens = get_tokens()
        token = tokens["token"]
        
        if not token:
            send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Alligator
        alligator_settings = signals_client.get_signal_alligator()
        
        if not alligator_settings:
            send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Alligator –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏–≥–Ω–∞–ª Alligator.")
            return
        
        jaw_period = alligator_settings.get('jawPeriod')
        jaw_shift = alligator_settings.get('jawShift')
        teeth_period = alligator_settings.get('teethPeriod')
        teeth_shift = alligator_settings.get('teethShift')
        lips_period = alligator_settings.get('lipsPeriod')
        lips_shift = alligator_settings.get('lipsShift')
        
        # –ü–æ–ª—É—á–∞–µ–º FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        instrument = instruments_client.get_instrument_by_ticker(ticker)
        if not instrument:
            send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞*\n\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        figi = instrument.get('figi')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å
        current_profit = 0
        
        # –°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        position = get_instrument_from_portfolio_by_ticker(token, figi, ticker, False)
        
        if position is not None:
            average_position_price = position['average_position_price']
            
            with Client(token) as client:
                current_price_sell, _ = get_current_price(figi, client, 'fast')
            
            current_profit = calculate_profit(average_position_price, cast_money(current_price_sell), BROKER_FEE)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if mls_interval == '6':
            start_time = datetime.now() - timedelta(days=183)
        elif mls_interval == '12':
            start_time = datetime.now() - timedelta(days=365)
        else:
            send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.")
            return
        
        candle_interval = CandleInterval.CANDLE_INTERVAL_DAY
        end_time = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏
        candles = get_historic_candles(figi, start_time, end_time, candle_interval)
        
        if not candles or not candles.candles:
            send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        df = create_df(candles.candles)
        min_candles = max(jaw_period, teeth_period, lips_period) + 1
        
        if len(df["high"].values) < min_candles or len(df["low"].values) < min_candles:
            send_or_edit_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞*\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞ Alligator.")
            return
        
        # –†–∞—Å—á–µ—Ç Alligator
        alligator_signal = calculate_alligator_strategy(
            candles, jaw_period, jaw_shift, teeth_period, teeth_shift, lips_period, lips_shift, current_profit
        )
        
        if alligator_signal != 'hold':
            emoji = "üü¢ BUY" if alligator_signal == 'buy' else "üî¥ SELL"
            send_or_edit_message(chat_id, f'üêä *Alligator —Å–∏–≥–Ω–∞–ª –¥–ª—è {ticker}*: {emoji}')
        
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ Alligator
        plot_alligator(chat_id, df)
    
    except Exception as e:
        send_or_edit_message(chat_id, f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Alligator —Å–∏–≥–Ω–∞–ª–∞*\n\n`{str(e)}`")
